import math
import os
import textwrap
import urllib.request as urllib
from html import escape
from urllib.parse import quote as urlquote

from bs4 import BeautifulSoup
from cloudscraper import CloudScraper
from PIL import Image, ImageDraw, ImageFont
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode,
    TelegramError,
    Update,
)
from telegram.ext import CallbackContext, CallbackQueryHandler
from telegram.utils.helpers import mention_html

from Exon import dispatcher
from Exon import telethn as bot
from Exon.events import register as asau
from Exon.modules.disable import DisableAbleCommandHandler
from Exon.Helper.covert import convert_gif

combot_stickers_url = "https://combot.org/telegram/stickers?q="


def stickerid(update: Update, context: CallbackContext):
    msg = update.effective_message
    if msg.reply_to_message and msg.reply_to_message.sticker:
        update.effective_message.reply_text(
            " ú·¥á ü ü·¥è "
            + f"{mention_html(msg.from_user.id, msg.from_user.first_name)}"
            + ", ·¥õ ú·¥á s·¥õ…™·¥Ñ·¥ã·¥á Ä …™·¥Ö  è·¥è·¥ú ·¥Ä Ä·¥á  Ä·¥á·¥ò ü è…™…¥…¢ …™s:\n<code>"
            + escape(msg.reply_to_message.sticker.file_id)
            + "</code>",
            parse_mode=ParseMode.HTML,
        )
    else:
        update.effective_message.reply_text(
            " ú·¥á ü ü·¥è "
            + f"{mention_html(msg.from_user.id, msg.from_user.first_name)}"
            + ", ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è …¢·¥á·¥õ …™·¥Ö s·¥õ…™·¥Ñ·¥ã·¥á Ä",
            parse_mode=ParseMode.HTML,
        )


scraper = CloudScraper()


def get_cbs_data(query, page, user_id):
    # returns (text, buttons)
    text = scraper.get(f"{combot_stickers_url}{urlquote(query)}&page={page}").text
    soup = BeautifulSoup(text, "lxml")
    div = soup.find("div", class_="page__container")
    packs = div.find_all("a", class_="sticker-pack__btn")
    titles = div.find_all("div", "sticker-pack__title")
    has_prev_page = has_next_page = None
    highlighted_page = div.find("a", class_="pagination__link is-active")
    if highlighted_page is not None and user_id is not None:
        highlighted_page = highlighted_page.parent
        has_prev_page = highlighted_page.previous_sibling.previous_sibling is not None
        has_next_page = highlighted_page.next_sibling.next_sibling is not None
    buttons = []
    if has_prev_page:
        buttons.append(
            InlineKeyboardButton(text="‚ü®", callback_data=f"cbs_{page - 1}_{user_id}")
        )
    if has_next_page:
        buttons.append(
            InlineKeyboardButton(text="‚ü©", callback_data=f"cbs_{page + 1}_{user_id}")
        )
    buttons = InlineKeyboardMarkup([buttons]) if buttons else None
    text = f"s·¥õ…™·¥Ñ·¥ã·¥á Äs “ì·¥è Ä <code>{escape(query)}</code>:\nPage: {page}"
    if packs and titles:
        for pack, title in zip(packs, titles):
            link = pack["href"]
            text += f"\n‚Ä¢ <a href='{link}'>{escape(title.get_text())}</a>"
    elif page == 1:
        text = "…¥·¥è  Ä·¥ás·¥ú ü·¥õs “ì·¥è·¥ú…¥·¥Ö, ·¥õ Ä è ·¥Ä ·¥Ö…™“ì“ì·¥á Ä·¥á…¥·¥õ ·¥õ·¥á Ä·¥ç"
    else:
        text += "\n\n…™…¥·¥õ·¥á Ä·¥ás·¥õ…™…¥…¢ ü è, ·¥õ ú·¥á Ä·¥á's …¥·¥è·¥õ ú…™…¥…¢  ú·¥á Ä·¥á."
    return text, buttons


def cb_sticker(update: Update, context: CallbackContext):
    msg = update.effective_message
    query = " ".join(msg.text.split()[1:])
    if not query:
        msg.reply_text("·¥ò Ä·¥è·¥†…™·¥Ö·¥á s·¥è·¥ç·¥á ·¥õ·¥á Ä·¥ç ·¥õ·¥è s·¥á·¥Ä Ä·¥Ñ ú “ì·¥è Ä ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã.")
        return
    if len(query) > 50:
        msg.reply_text("·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä s·¥á·¥Ä Ä·¥Ñ ú «´·¥ú·¥á Ä è ·¥ú…¥·¥Ö·¥á Ä ùüªùü∂ ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs")
        return
    if msg.from_user:
        user_id = msg.from_user.id
    else:
        user_id = None
    text, buttons = get_cbs_data(query, 1, user_id)
    msg.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=buttons)


def cbs_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    _, page, user_id = query.data.split("_", 2)
    if int(user_id) != query.from_user.id:
        query.answer("Not for you", cache_time=60 * 60)
        return
    search_query = query.message.text.split("\n", 1)[0].split(maxsplit=2)[2][:-1]
    text, buttons = get_cbs_data(search_query, int(page), query.from_user.id)
    query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=buttons)
    query.answer()


def getsticker(update: Update, context: CallbackContext):
    bot = context.bot
    msg = update.effective_message
    chat_id = update.effective_chat.id
    if msg.reply_to_message and msg.reply_to_message.sticker:
        file_id = msg.reply_to_message.sticker.file_id
        with BytesIO() as file:
            file.name = "sticker.png"
            new_file = bot.get_file(file_id)
            new_file.download(out=file)
            file.seek(0)
            bot.send_document(chat_id, document=file)
    else:
        update.effective_message.reply_text(
            "·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä “ì·¥è Ä ·¥ç·¥á ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õs ·¥ò…¥…¢.",
        )


def kang(update, context):
    msg = update.effective_message
    user = update.effective_user
    args = context.args
    packnum = 0
    packname = "a" + str(user.id) + "_by_" + context.bot.username
    packname_found = 0
    max_stickers = 120

    while packname_found == 0:
        try:
            stickerset = context.bot.get_sticker_set(packname)
            if len(stickerset.stickers) >= max_stickers:
                packnum += 1
                packname = (
                    "a"
                    + str(packnum)
                    + "_"
                    + str(user.id)
                    + "_by_"
                    + context.bot.username
                )
            else:
                packname_found = 1
        except TelegramError as e:
            if e.message == "Stickerset_invalid":
                packname_found = 1

    kangsticker = "kangsticker.png"
    is_animated = False
    is_video = False
    # convert gif method
    is_gif = False
    file_id = ""

    if msg.reply_to_message:
        if msg.reply_to_message.sticker:
            if msg.reply_to_message.sticker.is_animated:
                is_animated = True
            elif msg.reply_to_message.sticker.is_video:
                is_video = True
            file_id = msg.reply_to_message.sticker.file_id
        elif msg.reply_to_message.photo:
            file_id = msg.reply_to_message.photo[-1].file_id
        elif (
            msg.reply_to_message.document
            and not msg.reply_to_message.document.mime_type == "video/mp4"
        ):
            file_id = msg.reply_to_message.document.file_id
        elif msg.reply_to_message.animation:
            file_id = msg.reply_to_message.animation.file_id
            is_gif = True
        else:
            msg.reply_text(" è·¥á·¥Ä ú, …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ã·¥Ä…¥…¢ ·¥õ ú·¥Ä·¥õ.")
        kang_file = context.bot.get_file(file_id)
        if not is_animated and not (is_video or is_gif):
            kang_file.download("kangsticker.png")
        elif is_animated:
            kang_file.download("kangsticker.tgs")
        elif is_video and not is_gif:
            kang_file.download("kangsticker.webm")
        elif is_gif:
            kang_file.download("kang.mp4")
            convert_gif("kang.mp4")

        if args:
            sticker_emoji = str(args[0])
        elif msg.reply_to_message.sticker and msg.reply_to_message.sticker.emoji:
            sticker_emoji = msg.reply_to_message.sticker.emoji
        else:
            sticker_emoji = "üôÇ"

        adding_process = msg.reply_text(
            "<b>·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...“ì·¥è Ä ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ</b>",
            parse_mode=ParseMode.HTML,
        )

        if not is_animated and not (is_video or is_gif):
            try:
                im = Image.open(kangsticker)
                maxsize = (512, 512)
                if (im.width and im.height) < 512:
                    size1 = im.width
                    size2 = im.height
                    if im.width > im.height:
                        scale = 512 / size1
                        size1new = 512
                        size2new = size2 * scale
                    else:
                        scale = 512 / size2
                        size1new = size1 * scale
                        size2new = 512
                    size1new = math.floor(size1new)
                    size2new = math.floor(size2new)
                    sizenew = (size1new, size2new)
                    im = im.resize(sizenew)
                else:
                    im.thumbnail(maxsize)
                if not msg.reply_to_message.sticker:
                    im.save(kangsticker, "PNG")
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    png_sticker=open("kangsticker.png", "rb"),
                    emojis=sticker_emoji,
                )
                edited_keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                            )
                        ]
                    ]
                )
                adding_process.edit_text(
                    f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                    f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                    reply_markup=edited_keyboard,
                    parse_mode=ParseMode.HTML,
                )

            except OSError as e:
                print(e)
                return

            except TelegramError as e:
                if e.message == "Stickerset_invalid":
                    makepack_internal(
                        update,
                        context,
                        msg,
                        user,
                        sticker_emoji,
                        packname,
                        packnum,
                        png_sticker=open("kangsticker.png", "rb"),
                    )
                    adding_process.delete()
                elif e.message == "Sticker_png_dimensions":
                    im.save(kangsticker, "PNG")
                    adding_process = msg.reply_text(
                        "<b>·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...“ì·¥è Ä ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ</b>",
                        parse_mode=ParseMode.HTML,
                    )
                    context.bot.add_sticker_to_set(
                        user_id=user.id,
                        name=packname,
                        png_sticker=open("kangsticker.png", "rb"),
                        emojis=sticker_emoji,
                    )
                    edited_keyboard = InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                                )
                            ]
                        ]
                    )
                    adding_process.edit_text(
                        f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                        f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                        reply_markup=edited_keyboard,
                        parse_mode=ParseMode.HTML,
                    )
                elif e.message == "Invalid sticker emojis":
                    msg.reply_text("Invalid emoji(s).")
                elif e.message == "Stickers_too_much":
                    msg.reply_text("Max packsize reached. Press F to pay respecc.")
                elif e.message == "Internal Server Error: sticker set not found (500)":
                    edited_keyboard = InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                                )
                            ]
                        ]
                    )
                    msg.reply_text(
                        f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                        f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                        reply_markup=edited_keyboard,
                        parse_mode=ParseMode.HTML,
                    )
                print(e)

        elif is_animated:
            packname = "animated" + str(user.id) + "_by_" + context.bot.username
            packname_found = 0
            max_stickers = 50
            while packname_found == 0:
                try:
                    stickerset = context.bot.get_sticker_set(packname)
                    if len(stickerset.stickers) >= max_stickers:
                        packnum += 1
                        packname = (
                            "animated"
                            + str(packnum)
                            + "_"
                            + str(user.id)
                            + "_by_"
                            + context.bot.username
                        )
                    else:
                        packname_found = 1
                except TelegramError as e:
                    if e.message == "Stickerset_invalid":
                        packname_found = 1
            try:
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    tgs_sticker=open("kangsticker.tgs", "rb"),
                    emojis=sticker_emoji,
                )
                edited_keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                            )
                        ]
                    ]
                )
                adding_process.edit_text(
                    f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                    f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                    reply_markup=edited_keyboard,
                    parse_mode=ParseMode.HTML,
                )
            except TelegramError as e:
                if e.message == "Stickerset_invalid":
                    makepack_internal(
                        update,
                        context,
                        msg,
                        user,
                        sticker_emoji,
                        packname,
                        packnum,
                        tgs_sticker=open("kangsticker.tgs", "rb"),
                    )
                    adding_process.delete()
                elif e.message == "Invalid sticker emojis":
                    msg.reply_text("Invalid emoji(s).")
                elif e.message == "Internal Server Error: sticker set not found (500)":
                    edited_keyboard = InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                                )
                            ]
                        ]
                    )
                    adding_process.edit_text(
                        f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                        f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                        reply_markup=edited_keyboard,
                        parse_mode=ParseMode.HTML,
                    )
                print(e)

        elif is_video or is_gif:
            packname = "video" + str(user.id) + "_by_" + context.bot.username
            packname_found = 0
            max_stickers = 50
            while packname_found == 0:
                try:
                    stickerset = context.bot.get_sticker_set(packname)
                    if len(stickerset.stickers) >= max_stickers:
                        packnum += 1
                        packname = (
                            "video"
                            + str(packnum)
                            + "_"
                            + str(user.id)
                            + "_by_"
                            + context.bot.username
                        )
                    else:
                        packname_found = 1
                except TelegramError as e:
                    if e.message == "Stickerset_invalid":
                        packname_found = 1
            try:
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    webm_sticker=open("kangsticker.webm", "rb"),
                    emojis=sticker_emoji,
                )
                edited_keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                            )
                        ]
                    ]
                )
                adding_process.edit_text(
                    f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                    f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                    reply_markup=edited_keyboard,
                    parse_mode=ParseMode.HTML,
                )
            except TelegramError as e:
                if e.message == "Stickerset_invalid":
                    makepack_internal(
                        update,
                        context,
                        msg,
                        user,
                        sticker_emoji,
                        packname,
                        packnum,
                        webm_sticker=open("kangsticker.webm", "rb"),
                    )
                    adding_process.delete()
                elif e.message == "Invalid sticker emojis":
                    msg.reply_text("Invalid emoji(s).")
                elif e.message == "Internal Server Error: sticker set not found (500)":
                    edited_keyboard = InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                                )
                            ]
                        ]
                    )
                    adding_process.edit_text(
                        f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                        f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                        reply_markup=edited_keyboard,
                        parse_mode=ParseMode.HTML,
                    )
                print(e)

    elif args:
        try:
            try:
                urlemoji = msg.text.split(" ")
                png_sticker = urlemoji[1]
                sticker_emoji = urlemoji[2]
            except IndexError:
                sticker_emoji = "üôÉ"
            urllib.urlretrieve(png_sticker, kangsticker)
            im = Image.open(kangsticker)
            maxsize = (512, 512)
            if (im.width and im.height) < 512:
                size1 = im.width
                size2 = im.height
                if im.width > im.height:
                    scale = 512 / size1
                    size1new = 512
                    size2new = size2 * scale
                else:
                    scale = 512 / size2
                    size1new = size1 * scale
                    size2new = 512
                size1new = math.floor(size1new)
                size2new = math.floor(size2new)
                sizenew = (size1new, size2new)
                im = im.resize(sizenew)
            else:
                im.thumbnail(maxsize)
            im.save(kangsticker, "PNG")
            msg.reply_photo(photo=open("kangsticker.png", "rb"))
            context.bot.add_sticker_to_set(
                user_id=user.id,
                name=packname,
                png_sticker=open("kangsticker.png", "rb"),
                emojis=sticker_emoji,
            )
            edited_keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                        )
                    ]
                ]
            )
            adding_process.edit_text(
                f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                reply_markup=edited_keyboard,
                parse_mode=ParseMode.HTML,
            )
        except OSError as e:
            msg.reply_text("…™ ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è ·¥ã·¥Ä…¥…¢ …™·¥ç·¥Ä…¢·¥ás ·¥çùüæ.")
            print(e)
            return
        except TelegramError as e:
            if e.message == "Stickerset_invalid":
                makepack_internal(
                    update,
                    context,
                    msg,
                    user,
                    sticker_emoji,
                    packname,
                    packnum,
                    png_sticker=open("kangsticker.png", "rb"),
                )
                adding_process.delete()
            elif e.message == "Sticker_png_dimensions":
                im.save(kangsticker, "png")
                context.bot.add_sticker_to_set(
                    user_id=user.id,
                    name=packname,
                    png_sticker=open("kangsticker.png", "rb"),
                    emojis=sticker_emoji,
                )
                edited_keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}"
                            )
                        ]
                    ]
                )
                adding_process.edit_text(
                    f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                    f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                    reply_markup=edited_keyboard,
                    parse_mode=ParseMode.HTML,
                )
            elif e.message == "Invalid sticker emojis":
                msg.reply_text("Invalid emoji(s).")
            elif e.message == "Stickers_too_much":
                msg.reply_text("Max packsize reached. Press F to pay respect.")
            elif e.message == "Internal Server Error: sticker set not found (500)":
                msg.reply_text(
                    f"<b> è·¥è·¥ú Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö! \n“ì·¥è Ä “ì·¥ÄÍú±·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á . Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã.& ·¥Ä·¥Ö·¥Ö ·¥Ä…¢·¥Ä…™…¥ </b>"
                    f"\n·¥á·¥ç·¥è·¥ä…™ …™Íú±: {sticker_emoji}",
                    reply_markup=edited_keyboard,
                    parse_mode=ParseMode.HTML,
                )
            print(e)
    else:
        packs_text = "*·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä, ·¥è Ä …™·¥ç·¥Ä…¢·¥á ·¥õ·¥è ·¥ã·¥Ä…¥…¢ …™·¥õ!*\n"
        if packnum > 0:
            firstpackname = "a" + str(user.id) + "_by_" + context.bot.username
            for i in range(0, packnum + 1):
                if i == 0:
                    packs = f"t.me/addstickers/{firstpackname}"
                else:
                    packs = f"t.me/addstickers/{packname}"
        else:
            packs = f"t.me/addstickers/{packname}"

        edited_keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(text="s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã", url=f"{packs}"),
                ],
                [
                    InlineKeyboardButton(
                        text="v…™·¥Ö·¥áo ·¥ò·¥Ä·¥Ñ·¥ã",
                        url=f"https://t.me/addstickers/video{user.id}_by_{context.bot.username}",
                    ),
                    InlineKeyboardButton(
                        text="·¥Ä…¥…™·¥ç·¥Ä·¥õ·¥á·¥Ö ·¥ò·¥Ä·¥Ñ·¥ã",
                        url=f"https://t.me/addstickers/animated{user.id}_by_{context.bot.username}",
                    ),
                ],
            ]
        )
        msg.reply_text(
            packs_text, reply_markup=edited_keyboard, parse_mode=ParseMode.MARKDOWN
        )
    try:
        if os.path.isfile("kangsticker.png"):
            os.remove("kangsticker.png")
        elif os.path.isfile("kangsticker.tgs"):
            os.remove("kangsticker.tgs")
        elif os.path.isfile("kangsticker.webm"):
            os.remove("kangsticker.webm")
        elif os.path.isfile("kang.mp4"):
            os.remove("kang.mp4")
    except:
        pass


def makepack_internal(
    update,
    context,
    msg,
    user,
    emoji,
    packname,
    packnum,
    png_sticker=None,
    tgs_sticker=None,
    webm_sticker=None,
):
    name = user.first_name
    name = name[:50]
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton(text="·¥†…™·¥á·¥° ·¥ò·¥Ä·¥Ñ·¥ã", url=f"t.me/addstickers/{packname}")]]
    )
    try:
        extra_version = ""
        if packnum > 0:
            extra_version = " " + str(packnum)
        if png_sticker:
            sticker_pack_name = (
                f"{name}'s sticker pack (@{context.bot.username})" + extra_version
            )
            success = context.bot.create_new_sticker_set(
                user.id,
                packname,
                sticker_pack_name,
                png_sticker=png_sticker,
                emojis=emoji,
            )
        if tgs_sticker:
            sticker_pack_name = (
                f"{name}'s animated pack (@{context.bot.username})" + extra_version
            )
            success = context.bot.create_new_sticker_set(
                user.id,
                packname,
                sticker_pack_name,
                tgs_sticker=tgs_sticker,
                emojis=emoji,
            )
        if webm_sticker:
            sticker_pack_name = (
                f"{name}'s video pack (@{context.bot.username})" + extra_version
            )
            success = context.bot.create_new_sticker_set(
                user.id,
                packname,
                sticker_pack_name,
                webm_sticker=webm_sticker,
                emojis=emoji,
            )

    except TelegramError as e:
        print(e)
        if e.message == "Sticker set name is already occupied":
            msg.reply_text(
                "<b> è·¥è·¥ú Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö!</b>"
                "\n\n<b>s·¥á…¥·¥Ö /stickers ·¥õ·¥è “ì…™…¥·¥Ö ·¥Ä…¥ è s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã.</b>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
            )
        elif e.message == "Peer_id_invalid" or "bot was blocked by the user":
            msg.reply_text(
                f"{context.bot.first_name} ·¥°·¥Äs  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö  ô è  è·¥è·¥ú.",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="·¥ú…¥ ô ü·¥è·¥Ñ·¥ã", url=f"t.me/{context.bot.username}"
                            )
                        ]
                    ]
                ),
            )
        elif e.message == "Internal Server Error: created sticker set not found (500)":
            msg.reply_text(
                "<b> è·¥è·¥ú Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö!</b>"
                "\n\n<b>s·¥á…¥·¥Ö /stickers ·¥õ·¥è “ì…™…¥·¥Ö s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã.</b>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
            )
        return

    if success:
        msg.reply_text(
            "<b> è·¥è·¥ú Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö!</b>"
            "\n\n<b>s·¥á…¥·¥Ö /stickers ·¥õ·¥è “ì…™…¥·¥Ö s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã.</b>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )
    else:
        msg.reply_text("Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ã. ·¥ò·¥èÍú±Íú±…™ ô ü è ·¥Ö·¥ú·¥á ·¥õ·¥è  ô ü·¥á·¥ã ·¥ç·¥á·¥ä…™·¥ã.")


def getsticker(update: Update, context: CallbackContext):
    bot = context.bot
    msg = update.effective_message
    chat_id = update.effective_chat.id
    if msg.reply_to_message and msg.reply_to_message.sticker:
        file_id = msg.reply_to_message.sticker.file_id
        new_file = bot.get_file(file_id)
        new_file.download("sticker.png")
        bot.send_document(chat_id, document=open("sticker.png", "rb"))
        os.remove("sticker.png")
    else:
        update.effective_message.reply_text(
            "·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä Íú∞·¥è Ä ·¥ç·¥á ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õÍú± ·¥ò…¥…¢."
        )


def getvidsticker(update: Update, context: CallbackContext):
    bot = context.bot
    msg = update.effective_message
    chat_id = update.effective_chat.id
    if msg.reply_to_message and msg.reply_to_message.sticker:
        file_id = msg.reply_to_message.sticker.file_id
        new_file = bot.get_file(file_id)
        new_file.download("sticker.mp4")
        bot.send_video(chat_id, video=open("sticker.mp4", "rb"))
        os.remove("sticker.mp4")
    else:
        update.effective_message.reply_text(
            "·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥†…™·¥Ö·¥á·¥è Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õÍú± ·¥ç·¥ò4."
        )


def delsticker(update, context):
    msg = update.effective_message
    if msg.reply_to_message and msg.reply_to_message.sticker:
        file_id = msg.reply_to_message.sticker.file_id
        context.bot.delete_sticker_from_set(file_id)
        msg.reply_text("·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö!")
    else:
        update.effective_message.reply_text(
            "·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á ü Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä"
        )


def video(update: Update, context: CallbackContext):
    bot = context.bot
    msg = update.effective_message
    chat_id = update.effective_chat.id
    if msg.reply_to_message and msg.reply_to_message.animation:
        file_id = msg.reply_to_message.animation.file_id
        new_file = bot.get_file(file_id)
        new_file.download("video.mp4")
        bot.send_video(chat_id, video=open("video.mp4", "rb"))
        os.remove("video.mp4")
    else:
        update.effective_message.reply_text(
            "·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä …¢…™Íú∞ Íú∞·¥è Ä ·¥ç·¥á ·¥õ·¥è …¢·¥á·¥õ …™·¥õ'Íú± ·¥†…™·¥Ö·¥á·¥è."
        )


@asau(pattern="^/mmf ?(.*)")
async def handler(event):
    if event.fwd_from:
        return
    if not event.reply_to_msg_id:
        await event.reply(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á ·¥è Ä ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥ç·¥á·¥ç·¥á…™Íú∞ è …™·¥õ!")
        return
    reply_message = await event.get_reply_message()
    if not reply_message.media:
        await event.reply("·¥ò Ä·¥è·¥†…™·¥Ö·¥á Íú±·¥è·¥ç·¥á ·¥õ·¥áx·¥õ ·¥ò ü·¥á·¥ÄÍú±·¥á")
        return
    file = await bot.download_media(reply_message)
    msg = await event.reply("·¥ç·¥á·¥ç…™Íú∞ è…™…¥…¢ ·¥õ ú…™Íú± …™·¥ç·¥Ä…¢·¥á! ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ")

    text = str(event.pattern_match.group(1)).strip()
    if len(text) < 1:
        return await msg.edit(" è·¥è·¥ú ·¥ç…™…¢ ú·¥õ ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥õ Ä è `/mmf text`")
    meme = await drawText(file, text)
    await bot.send_file(event.chat_id, file=meme, force_document=False)
    await msg.delete()
    os.remove(meme)


async def drawText(image_path, text):
    img = Image.open(image_path)
    os.remove(image_path)
    i_width, i_height = img.size
    if os.name == "nt":
        fnt = "ariel.ttf"
    else:
        fnt = "./Exon/resources/default.ttf"
    m_font = ImageFont.truetype(fnt, int((70 / 640) * i_width))
    if ";" in text:
        upper_text, lower_text = text.split(";")
    else:
        upper_text = text
        lower_text = ""
    draw = ImageDraw.Draw(img)
    current_h, pad = 10, 5
    if upper_text:
        for u_text in textwrap.wrap(upper_text, width=15):
            u_width, u_height = draw.textsize(u_text, font=m_font)
            draw.text(
                xy=(((i_width - u_width) / 2) - 2, int((current_h / 640) * i_width)),
                text=u_text,
                font=m_font,
                fill=(0, 0, 0),
            )

            draw.text(
                xy=(((i_width - u_width) / 2) + 2, int((current_h / 640) * i_width)),
                text=u_text,
                font=m_font,
                fill=(0, 0, 0),
            )
            draw.text(
                xy=((i_width - u_width) / 2, int(((current_h / 640) * i_width)) - 2),
                text=u_text,
                font=m_font,
                fill=(0, 0, 0),
            )

            draw.text(
                xy=(((i_width - u_width) / 2), int(((current_h / 640) * i_width)) + 2),
                text=u_text,
                font=m_font,
                fill=(0, 0, 0),
            )

            draw.text(
                xy=((i_width - u_width) / 2, int((current_h / 640) * i_width)),
                text=u_text,
                font=m_font,
                fill=(255, 255, 255),
            )

            current_h += u_height + pad

    if lower_text:
        for l_text in textwrap.wrap(lower_text, width=15):
            u_width, u_height = draw.textsize(l_text, font=m_font)
            draw.text(
                xy=(
                    ((i_width - u_width) / 2) - 2,
                    i_height - u_height - int((20 / 640) * i_width),
                ),
                text=l_text,
                font=m_font,
                fill=(0, 0, 0),
            )
            draw.text(
                xy=(
                    ((i_width - u_width) / 2) + 2,
                    i_height - u_height - int((20 / 640) * i_width),
                ),
                text=l_text,
                font=m_font,
                fill=(0, 0, 0),
            )
            draw.text(
                xy=(
                    (i_width - u_width) / 2,
                    (i_height - u_height - int((20 / 640) * i_width)) - 2,
                ),
                text=l_text,
                font=m_font,
                fill=(0, 0, 0),
            )
            draw.text(
                xy=(
                    (i_width - u_width) / 2,
                    (i_height - u_height - int((20 / 640) * i_width)) + 2,
                ),
                text=l_text,
                font=m_font,
                fill=(0, 0, 0),
            )

            draw.text(
                xy=(
                    (i_width - u_width) / 2,
                    i_height - u_height - int((20 / 640) * i_width),
                ),
                text=l_text,
                font=m_font,
                fill=(255, 255, 255),
            )
            current_h += u_height + pad
    image_name = "memify.webp"
    webp_file = os.path.join(image_name)
    img.save(webp_file, "webp")
    return webp_file


__mod_name__ = "S·¥õ…™·¥Ñ·¥ã·¥á Ä"

__help__ = """
* ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú “ì·¥è Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á ÄÍú± ·¥õ·¥è·¥è üÍú±*

‚Ä¢‚û• /stickerid*:* ` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥ç·¥á ·¥õ·¥è ·¥õ·¥á ü ü  è·¥è·¥ú …™·¥õÍú± “ì…™ ü·¥á …™·¥Ö`.

‚Ä¢‚û• /getsticker*:* ` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥ç·¥á ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õÍú±  Ä·¥Ä·¥° ·¥ò…¥…¢ “ì…™ ü·¥á`.

‚Ä¢‚û• /kang*:* ` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥Ä·¥Ö·¥Ö …™·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã`.

‚Ä¢‚û• /delsticker*:* ` Ä·¥á·¥ò ü è ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä…¥…™·¥ç·¥á ·¥áx…™Íú±·¥õ Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è  è·¥è·¥ú Ä ·¥ò·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á …™·¥õ`.

‚Ä¢‚û• /stickers*:* `“ì…™…¥·¥Ö Íú±·¥õ…™·¥Ñ·¥ã·¥á ÄÍú± “ì·¥è Ä …¢…™·¥†·¥á…¥ ·¥õ·¥á Ä·¥ç ·¥è…¥ ·¥Ñ·¥è·¥ç ô·¥è·¥õ Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥Ñ·¥Ä·¥õ·¥Ä ü·¥è…¢·¥ú·¥á`.

‚Ä¢‚û• /mmf <reply with text>*:* `·¥õ·¥è ·¥Ö Ä·¥Ä·¥° a ·¥õ·¥áx·¥õ “ì·¥è Ä Íú±·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥è Ä ·¥ò·¥è ú·¥è·¥õÍú±`.

‚Ä¢‚û• /getvidsticker*:* ` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥†…™·¥Ö·¥á·¥è s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥õ·¥è ·¥ç·¥á ·¥õ·¥è ·¥ú·¥ò ü·¥è·¥Ä·¥Ö …™·¥õ's ·¥ç·¥òùü∫ “ì…™ ü·¥á`.

‚Ä¢‚û• /getvideo*:* ` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä …¢…™“ì ·¥õ·¥è …¢·¥á·¥õ ·¥†…™·¥Ö·¥á·¥è ·¥á·¥Äs…™ ü è !`.
"""


STICKERID_HANDLER = DisableAbleCommandHandler("stickerid", stickerid, run_async=True)
GETSTICKER_HANDLER = DisableAbleCommandHandler("getsticker", getsticker, run_async=True)
GETVIDSTICKER_HANDLER = DisableAbleCommandHandler(
    "getvidsticker", getvidsticker, run_async=True
)
KANG_HANDLER = DisableAbleCommandHandler("kang", kang, pass_args=True, run_async=True)
DEL_HANDLER = DisableAbleCommandHandler("delsticker", delsticker, run_async=True)
STICKERS_HANDLER = DisableAbleCommandHandler("stickers", cb_sticker, run_async=True)
VIDEO_HANDLER = DisableAbleCommandHandler("getvideo", video, run_async=True)
CBSCALLBACK_HANDLER = CallbackQueryHandler(cbs_callback, pattern="cbs_", run_async=True)

dispatcher.add_handler(VIDEO_HANDLER)
dispatcher.add_handler(CBSCALLBACK_HANDLER)
dispatcher.add_handler(STICKERS_HANDLER)
dispatcher.add_handler(STICKERID_HANDLER)
dispatcher.add_handler(GETSTICKER_HANDLER)
dispatcher.add_handler(GETVIDSTICKER_HANDLER)
dispatcher.add_handler(KANG_HANDLER)
dispatcher.add_handler(DEL_HANDLER)

from Exon.modules.language import gs


def get_help(chat):
    return gs(chat, "sticker_help")
